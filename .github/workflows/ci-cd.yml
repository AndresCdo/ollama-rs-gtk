name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Check formatting
        run: cargo fmt -- --check

  test:
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest]
        rust: [stable, nightly]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Install Clippy
        run: rustup component add clippy --toolchain ${{ matrix.rust }}
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libpango1.0-dev \
            libcairo2-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libgtk-3-dev \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.1-dev \
            libwebkit2gtk-4.0-dev \
            libgtksourceview-3.0-dev
      - name: Run clippy
        run: cargo clippy -- -D warnings
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run benchmarks
        run: cargo bench
      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ollama-rs-gtk-${{ matrix.os }}-${{ matrix.rust }}
          path: target/debug/ollama-rs

  security_audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  docs:
    needs: [test, security_audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Generate documentation
        run: cargo doc --no-deps
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  release:
    needs: [test, security_audit]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v2
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.39.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          WITH_V: true
      - name: Create release artifact
        run: |
          mkdir -p dist
          cp ollama-rs-gtk-ubuntu-latest-stable/ollama-rs dist/
          tar -czvf dist/ollama-rs-gtk.tar.gz dist/ollama-rs
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump_version.outputs.new_tag }}
          release_name: Release ${{ steps.bump_version.outputs.new_tag }}
          draft: false
          prerelease: false
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/ollama-rs-gtk.tar.gz
          asset_name: ollama-rs-gtk-${{ runner.os }}-${{ steps.bump_version.outputs.new_tag }}.tar.gz
          asset_content_type: application/gzip
      - name: Generate release notes
        run: |
          echo "# What's new in ${{ steps.bump_version.outputs.new_tag }}" > release_notes.md
          git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s" >> release_notes.md
      - name: Upload release notes
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_notes.md
          asset_name: release_notes.md
          asset_content_type: text/markdown

  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          cname: ollama-rs.github.io
          commit_message: Deploy to GitHub Pages